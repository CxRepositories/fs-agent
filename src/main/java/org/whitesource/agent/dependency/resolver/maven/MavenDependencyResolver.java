/**
 * Copyright (C) 2017 WhiteSource Ltd.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.whitesource.agent.dependency.resolver.maven;
import org.whitesource.agent.api.model.DependencyInfo;
import org.whitesource.agent.api.model.DependencyType;
import org.whitesource.agent.dependency.resolver.AbstractDependencyResolver;
import org.whitesource.agent.dependency.resolver.BomFile;
import org.whitesource.agent.dependency.resolver.ResolutionResult;

import java.io.File;
import java.util.*;
import java.util.stream.Collectors;


/**
     * Dependency Resolver for Maven projects.
     *
     * @author eugen.horovitz
     */
    public class MavenDependencyResolver extends AbstractDependencyResolver {


    private static final String POM_XML = "pom.xml";
    private static final String JAVA_EXTENSION = ".java";
    private static final String POM_XML_FILE = "**/*" + POM_XML;

    @Override
    protected ResolutionResult resolveDependencies(String projectFolder, String topLevelFolder, List<String> bomFiles) {
        // parse package.json files
        Collection<BomFile> parsedBomFiles = new LinkedList<>();

//        Map<File, List<File>> mapBomFiles = bomFiles.stream().map(file -> new File(file)).collect(Collectors.groupingBy(File::getParentFile));
//
//        List<File> files = mapBomFiles.entrySet().stream().map(entry -> {
//            if (entry.getValue().size() > 1) {
//                return entry.getValue().stream().filter(file -> fileShouldBeParsed(file)).findFirst().get();
//            } else {
//                return entry.getValue().stream().findFirst().get();
//            }
//        }).collect(Collectors.toList());
//
//        files.forEach(bomFile -> {
//            BomFile parsedBomFile = getBomParser().parseBomFile(bomFile.getAbsolutePath());
//            if (parsedBomFile != null && parsedBomFile.isValid()) {
//                parsedBomFiles.add(parsedBomFile);
//            }
//        });

        // try to collect dependencies via 'npm ls'
        //Collection<DependencyInfo> dependencies = getDependencyCollector().collectDependencies(topLevelFolder);
        //boolean lsSuccess = dependencies.size() > 0;
        //if (lsSuccess) {
            //handleLsSuccess(parsedBomFiles, dependencies);
        //} else {
            //dependencies.addAll(collectPackageJsonDependencies(parsedBomFiles));
        //}
        return null;
    }

    @Override
    protected Collection<String> getExcludes() {
        Set<String> excludes = new HashSet<>();
        excludes.addAll(getLanguageExcludes());
        return excludes;
    }

    @Override
    protected Collection<String> getSourceFileExtensions() {
        return Arrays.asList(JAVA_EXTENSION);
    }

    @Override
    protected DependencyType getDependencyType() {
        return DependencyType.MAVEN;
    }

    @Override
    public String getBomPattern() {
        return "**/*" + POM_XML;
    }

    @Override
    protected Collection<String> getLanguageExcludes() {
        // exclude files generated by the WhiteSource Bower plugin
        Set<String> excludes = new HashSet<>();
        excludes.add(POM_XML_FILE);
        return excludes;
    }
}