/**
 * Copyright (C) 2017 WhiteSource Ltd.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.whitesource.agent.dependency.resolver.npm;
import org.whitesource.agent.api.model.DependencyInfo;
import org.whitesource.agent.api.model.DependencyType;
import org.whitesource.agent.dependency.resolver.AbstractDependencyResolver;
import org.whitesource.agent.dependency.resolver.BomFile;
import org.whitesource.agent.dependency.resolver.bower.BowerDependencyResolver;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

/**
 * Dependency Resolver for NPM projects.
 *
 * @author eugen.horovitz
 */
public class NpmDependencyResolver extends AbstractDependencyResolver {

    /* --- Static members --- */

    private static String PACKAGE_JSON = "package.json";
    private static final String JAVA_SCRIPT_EXTENSION = ".js";

    /* --- Members --- */

    private final NpmLsJsonDependencyCollector bomCollector;
    private final NpmBomParser bomParser;

    /* --- Constructor --- */

    public NpmDependencyResolver(boolean includeDevDependencies) {
        super();
        bomCollector = new NpmLsJsonDependencyCollector(includeDevDependencies);
        bomParser = new NpmBomParser();
    }

    public NpmDependencyResolver() {
        this(false);
    }

    /* --- Overridden methods --- */

    @Override
    protected boolean isMatchChildDependency(DependencyInfo childDependency, String name, String version) {
        return childDependency.getFilename().equals(NpmBomParser.getNpmArtifactId(name, version));
    }

    @Override
    protected void enrichDependency(DependencyInfo dependency, BomFile packageJson) {
        dependency.setSha1(packageJson.getSha1());
        dependency.setGroupId(packageJson.getName());
        dependency.setArtifactId(packageJson.getFileName());
        dependency.setVersion(packageJson.getVersion());
        dependency.setSystemPath(packageJson.getLocalFileName());
        dependency.setFilename(packageJson.getLocalFileName());
        dependency.setDependencyType(getDependencyType());
    }

    @Override
    protected Collection<String> getLanguageExcludes() {
        // NPM can contain files generated by the WhiteSource Bower plugin
        Set<String> excludes = new HashSet<>();
        excludes.add(BowerDependencyResolver.WS_BOWER_FILE2);
        excludes.add(BowerDependencyResolver.WS_BOWER_FILE1);
        return excludes;
    }

    @Override
    public String getBomPattern() {
        return "**/*" + PACKAGE_JSON;
    }

    @Override
    public String getPreferredFileName() {
        return PACKAGE_JSON;
    }

    @Override
    protected NpmBomParser getBomParser() {
        return bomParser;
    }

    @Override
    protected DependencyType getDependencyType() {
        return DependencyType.NPM;
    }

    @Override
    protected NpmLsJsonDependencyCollector getDependencyCollector() {
        return bomCollector;
    }

    @Override
    protected Collection<String> getSourceFileExtensions() {
        return Arrays.asList(JAVA_SCRIPT_EXTENSION);
    }
}